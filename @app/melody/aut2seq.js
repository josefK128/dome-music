// aut2seq.js - read finite automaton definition file (.aut) and
// command line arguments for autfile-path, melody-length, no-of-selections,
// startState and endStates. Select a subset of finite automation
// generated melodies and record them in a sequences file seg/.str.
// There are two runs:
// The first is to use wc to get the number of melodies generated by the fa.
// The second is to extract a subset of the melodies produced by the fa.

import {exec} from 'node:child_process';


if(process.argc < 8){
  console.log('usage: node aut2seq autpath seqpath nmelodies melodylength nselections startState endStates');
}

const autpath = process.argv[2],
      seqpath = process.argv[3],
      nmelodies = process.argv[4],
      melodylength = process.argv[5],
      nselections = process.argv[6],
      startState = process.argv[7],
      argc = process.argv.length;

let endStates = '',
    N = 0;

for(let i=8; i<argc; i++){
  endStates += process.argv[i] + ' ';
}
endStates = endStates.trim();


console.log(`autpath = ${autpath}`);
console.log(`seqpath = ${seqpath}`);
console.log(`nmelodies = ${nmelodies}`);
console.log(`melodylength = ${melodylength}`);
console.log(`nselections = ${nselections}`);
console.log(`startState = ${startState}`);
console.log(`endStates = ${endStates}`);
console.log(`argc = ${argc}`);


// generate melodies - write to seqpath (exp: @/test/test17/17.txt)
//action = `autogen2 ${autpath} ${melodylength} ${startState} ${endStates} |  ssline ${N} ${nselections} > ${seqpath}`;
let action = `autogen2 ${autpath} ${melodylength} ${startState} ${endStates} | ssline ${nmelodies} ${nselections} > ${seqpath}`;
console.log(`action = ${action}`);

exec(action, (err) => {
  if(err){
    console.log(`error using ${action}: ${err.message}`);
  }  
});






