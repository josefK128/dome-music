// aut2nlines.js 
// usage: npm run aut2seq autpath melodylength startState endStates');
// read finite automaton definition file (.aut) and
// command line arguments for autfile-path, melody-length, no-of-selections,
// startState and endStates. Select a subset of finite automation
// generated melodies and record them in a sequences file seg/.str.
// There are two runs:
// aut2nlines:
// The first is to use wc to get the number of melodies generated by the fa.
// aut2seq
// The second is to extract a subset of the melodies produced by the fa.

// NOTE: process.cwd() returns the directory from which the npm cmd was made
// NOTE: __dirname = url.fileURLToPath(new URL('.', import.meta.url)) is the
// directory containing the npm nodejs-executable file
// NOTE: __filename = url.fileURLToPath(import.meta.url) is the path to the
// npm nodejs-executable file itself


import {exec} from 'node:child_process';



if(process.argv.length < 5){
  console.log('usage: npm run aut2seq autpath melodylength startState endStates');
  process.exit(1);
}

const autpath = process.argv[2],
      melodylength = process.argv[3],
      startState = process.argv[4],
      argc = process.argv.length;

let endStates = '',
    N = 0;

for(let i=5; i<argc; i++){
  endStates += process.argv[i] + ' ';
}
endStates = endStates.trim();


//console.log(`autpath = ${autpath}`);
//console.log(`melodylength = ${melodylength}`);
//console.log(`startState = ${startState}`);
//console.log(`endStates = ${endStates}`);
//console.log(`argc = ${argc}`);
let action = `autogen2 ${autpath} ${melodylength} ${startState} ${endStates} | wc -l`;
console.log(`action = ${action}`);



exec(action, (err, stdout) => {
  if(err){
    console.log(`error using ${action}: ${err.message}`);
    process.exit(1);
  }  
  if(stdout){
    N = stdout;
    console.log(`number of melodies generated is ${N}`);
  }  
});

